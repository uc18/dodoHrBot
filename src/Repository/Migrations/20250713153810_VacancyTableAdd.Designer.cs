// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(SupabaseContext))]
    [Migration("20250713153810_VacancyTableAdd")]
    partial class VacancyTableAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entities.Candidate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("First_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Last_name");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("Telegram_Id");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Repository.Entities.Periodicity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("Settings")
                        .HasColumnType("integer")
                        .HasColumnName("Periodicity_Id");

                    b.Property<DateTime>("StartNotify")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StartNotify");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Periodicity");
                });

            modelBuilder.Entity("Repository.Entities.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Repository.Entities.SubscribedVacancy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("integer")
                        .HasColumnName("Speciality_Id");

                    b.Property<int?>("SubspecialtyId")
                        .HasColumnType("integer")
                        .HasColumnName("Subspecialty_Id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SubscribedVacancy");
                });

            modelBuilder.Entity("Repository.Entities.Vacancy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer")
                        .HasColumnName("VacancyId");

                    b.HasKey("Id");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("Repository.Entities.Periodicity", b =>
                {
                    b.HasOne("Repository.Entities.Candidate", "Candidate")
                        .WithOne("Periodicity")
                        .HasForeignKey("Repository.Entities.Periodicity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("Repository.Entities.SubscribedVacancy", b =>
                {
                    b.HasOne("Repository.Entities.Candidate", "Candidates")
                        .WithMany("SubscribedVacancies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("Repository.Entities.Candidate", b =>
                {
                    b.Navigation("Periodicity");

                    b.Navigation("SubscribedVacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
